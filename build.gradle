import org.gradle.internal.os.OperatingSystem
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
  id 'cpp'
  id 'java'
  id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '2.1'
  id 'edu.wpi.first.NativeUtils' version '1.7.0'
  id 'edu.wpi.first.GradleVsCode' version '0.3.0'
  id 'google-test-test-suite'
  id "com.dorongold.task-tree" version "1.3"
}

apply from: "locations.gradle"
apply from: "options.gradle"

apply from: 'config.gradle'

ext.sharedFrcConfigs = [CTRE_Phoenix: ['linux:athena']]
ext.sharedCCIConfigs = [CTRE_Phoenix: []]

//For googletest
ext.staticTestConfigs = [CTRE_PhoenixTest: []]

//For java unit test linking (just exists so dlls are pulled in)
ext.sharedTestConfigs = [DummyLinkForJavaTest: ['linux:x86-64', 'linux:armhf', 'linux:aarch64', 'windows:x86-64', 'windows:x86', 'osx:x86-64']]

ext.javaLibsFiles = []
ext.javaLibsDir = []

apply from: 'dependencies.gradle'

model {
  exportsConfigs {
      CTRE_Phoenix(ExportsConfig) {
          x86ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVbad_cast',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure']
          x64ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVbad_cast',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure']
      }
  }
  components {
    CTRE_Phoenix(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
    }
  }
  testSuites {
    //For java unit test linking (just exists so dlls are pulled in)
    DummyLinkForJavaTest(GoogleTestTestSuiteSpec) {
      for(NativeComponentSpec c : $.components) {
        if (c.name == 'CTRE_Phoenix') {
          testing c
          break
        }
      }
      sources {
        cpp {
          source {
            srcDirs 'src/dummy/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/dummy/native/include'
          }
        }
      }
    }
    CTRE_PhoenixTest(GoogleTestTestSuiteSpec) {
      for(NativeComponentSpec c : $.components) {
        if (c.name == 'CTRE_Phoenix') {
          testing c
          break
        }
      }
      sources {
        cpp {
          source {
            srcDirs 'src/test/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/test/native/include', 'src/main/native/include'
          }
        }
      }
    }
  }
  binaries {
    //Only build a test suite for native execution (for now at least)
    withType(GoogleTestTestSuiteBinarySpec) {
      if (it.targetPlatform.architecture.name != 'x86' && it.targetPlatform.architecture.name != 'x86-64') {
        it.buildable = false
      }    
      if(it.component.name == 'DummyLinkForJavaTest') {
        if (it.targetPlatform.architecture.name == 'x86' || it.targetPlatform.architecture.name == 'x86-64') {
          for(lib in it.libs) {
            if(lib.linkFiles.asFileTrees.size() > 0) {
              javaLibsDir << lib.linkFiles.asFileTrees.get(0).dir
              javaLibsFiles << lib.linkFiles.asFileTrees.get(0).file
            }
          }
        }
      } else {
        lib library: 'CTRE_Phoenix', linkage: 'static'
      }
    }
    //If we are not building for windows, don't bother with the shared library
    withType(SharedLibraryBinarySpec) {
      if (it.targetPlatform.operatingSystem.name != 'windows') {
        it.buildable = true
      }
    }
  }
}

tasks.whenTaskAdded { task ->
    if(task.name == 'runDummyLinkForJavaTestX86-64GoogleTestExe') {
                task.enabled = false
    }
}


task linkJava {
    doFirst {
        
        def prefix = OperatingSystem.current().isWindows() ? '' : 'lib'
        def extension = OperatingSystem.current().isWindows() ? 'dll' : OperatingSystem.current().isMacOsX() ? 'dylib' : 'so'
        
        for(dir in javaLibsDir) {
            if(dir.toString().contains('cci')) {
                test.systemProperty 'java.library.path', dir.toString()
            }
            if(dir.toString().contains('platform')) {
                Path source = Paths.get(dir.toString() + java.io.File.separator + prefix + 'CTRE_PhoenixPlatform_sim.' + extension)           
                Path target = Paths.get(dir.toString() + java.io.File.separator + prefix + 'CTRE_PhoenixPlatform.' + extension)
                Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING)     
            }
        }
        if(OperatingSystem.current().isWindows()) {
            javaLibsDir << test.environment.get('PATH')
            test.environment.put('PATH', javaLibsDir.join(';'))
        }
        else if(OperatingSystem.current().isMacOsX()) { 
            test.environment.put('DYLD_LIBRARY_PATH', javaLibsDir.join(';'))
        }
        else if(OperatingSystem.current().isLinux()) { 
            test.environment.put('LD_LIBRARY_PATH', javaLibsDir.join(';'))
        } 
    }
}

test.dependsOn linkJava
linkJava.dependsOn('runDummyLinkForJavaTestX86-64GoogleTestExe')

apply from: 'publish.gradle'

publish.dependsOn build

wrapper {
  gradleVersion = '4.9'
}
