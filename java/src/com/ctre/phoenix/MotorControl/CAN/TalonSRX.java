/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2016. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package com.ctre.phoenix.MotorControl.CAN;
import com.ctre.phoenix.MotorControl.CAN.MotControllerJNI;

public class TalonSRX extends com.ctre.phoenix.MotorControl.CAN.BaseMotorController {
	
  public TalonSRX(int deviceNumber)
  {
	  super(deviceNumber | 0x02040000);
  }
  
  /**
   * Configures the peak current limit of the motor controller.
   *
   * @param amps      Peak current limit (in amps).
   * @param timeoutMs Timeout value in ms.  @see #ConfigOpenLoopRamp
   * @return           Error Code generated by function.  0 indicates no error.   */
	int ConfigPeakCurrentLimit(int amps, int timeoutMs)
	{
		return MotControllerJNI.ConfigPeakCurrentLimit(m_handle, amps, timeoutMs);
	}
  /**
   * Configures the maximum time allowed at peak current limit of the motor controller.
   *
   * @param milliseconds Maximum time allowed at peak current limit (in milliseconds).
   * @param timeoutMs    Timeout value in ms.  @see #ConfigOpenLoopRamp
   * @return              Error Code generated by function.  0 indicates no error.   */
	int ConfigPeakCurrentDuration(int milliseconds, int timeoutMs)
	{
		return MotControllerJNI.ConfigPeakCurrentDuration(m_handle, milliseconds, timeoutMs);
	}
  /**
   * Configures the continuous current limit.
   *
   * @param amps      Continuous Current Limit.
   * @param timeoutMs Timeout value in ms.  @see #ConfigOpenLoopRamp
   * @return           Error Code generated by function.  0 indicates no error.   */
	int ConfigContinuousCurrentDuration(int amps, int timeoutMs)
	{
		return MotControllerJNI.ConfigContinuousCurrentLimit(m_handle, amps, timeoutMs);
	}
  /**
   * Enables the current limit feature.
   *
   * @param enable Enable state of current limit.
   **/
	void EnableCurrentLimit(boolean enable)
	{
		MotControllerJNI.EnableCurrentLimit(m_handle, enable);
	}
}
