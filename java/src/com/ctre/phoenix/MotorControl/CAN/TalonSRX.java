/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2016. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package com.ctre.phoenix.MotorControl.CAN;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.MotorControl.FeedbackDevice;
import com.ctre.phoenix.MotorControl.IMotorControllerEnhanced;
import com.ctre.phoenix.MotorControl.LimitSwitchNormal;
import com.ctre.phoenix.MotorControl.LimitSwitchSource;
import com.ctre.phoenix.MotorControl.StatusFrame;
import com.ctre.phoenix.MotorControl.StatusFrameEnhanced;
import com.ctre.phoenix.MotorControl.VelocityMeasPeriod;
import com.ctre.phoenix.MotorControl.CAN.MotControllerJNI;

public class TalonSRX extends com.ctre.phoenix.MotorControl.CAN.BaseMotorController
		implements IMotorControllerEnhanced {

	public TalonSRX(int deviceNumber) {
		super(deviceNumber | 0x02040000);
	}

	public ErrorCode ConfigSelectedFeedbackSensor(FeedbackDevice feedbackDevice, int timeoutMs) {
		return super.ConfigSelectedFeedbackSensor(feedbackDevice, timeoutMs);
	}

	public ErrorCode SetStatusFramePeriod(StatusFrameEnhanced frame, int periodMs, int timeoutMs) {
		return super.SetStatusFramePeriod(frame.value, periodMs, timeoutMs);
	}

	public int GetStatusFramePeriod(StatusFrameEnhanced frame, int timeoutMs) {

		return super.GetStatusFramePeriod(frame, timeoutMs);
	}

	public ErrorCode ConfigVelocityMeasurementPeriod(VelocityMeasPeriod period, int timeoutMs) {
		return super.ConfigVelocityMeasurementPeriod(period, timeoutMs);
	}

	public ErrorCode ConfigVelocityMeasurementWindow(int windowSize, int timeoutMs) {
		return super.ConfigVelocityMeasurementWindow(windowSize, timeoutMs);
	}

	public ErrorCode ConfigForwardLimitSwitchSource(LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose,
			int timeoutMs) {

		return super.ConfigForwardLimitSwitchSource(type.value, normalOpenOrClose.value, 0x00000000, timeoutMs);
	}

	public ErrorCode ConfigReverseLimitSwitchSource(LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose,
			int timeoutMs) {
		return super.ConfigReverseLimitSwitchSource(type.value, normalOpenOrClose.value, 0x00000000, timeoutMs);
	}

	// ------ Current Lim ----------//
	/**
	 * Configures the peak current limit of the motor controller.
	 *
	 * @param amps
	 *            Peak current limit (in amps).
	 * @param timeoutMs
	 *            Timeout value in ms. @see #ConfigOpenLoopRamp
	 * @return Error Code generated by function. 0 indicates no error.
	 */
	public ErrorCode ConfigPeakCurrentLimit(int amps, int timeoutMs) {
		int retval =  MotControllerJNI.ConfigPeakCurrentLimit(m_handle, amps, timeoutMs);
		return ErrorCode.valueOf(retval);
	}

	/**
	 * Configures the maximum time allowed at peak current limit of the motor
	 * controller.
	 *
	 * @param milliseconds
	 *            Maximum time allowed at peak current limit (in milliseconds).
	 * @param timeoutMs
	 *            Timeout value in ms. @see #ConfigOpenLoopRamp
	 * @return Error Code generated by function. 0 indicates no error.
	 */
	public ErrorCode ConfigPeakCurrentDuration(int milliseconds, int timeoutMs) {
		int retval = MotControllerJNI.ConfigPeakCurrentDuration(m_handle, milliseconds, timeoutMs);
		return ErrorCode.valueOf(retval);
	}

	/**
	 * Configures the continuous current limit.
	 *
	 * @param amps
	 *            Continuous Current Limit.
	 * @param timeoutMs
	 *            Timeout value in ms. @see #ConfigOpenLoopRamp
	 * @return Error Code generated by function. 0 indicates no error.
	 */
	public ErrorCode ConfigContinuousCurrentLimit(int amps, int timeoutMs) {
		int retval =  MotControllerJNI.ConfigContinuousCurrentLimit(m_handle, amps, timeoutMs);
		return ErrorCode.valueOf(retval);
	}

	/**
	 * Enables the current limit feature.
	 *
	 * @param enable
	 *            Enable state of current limit.
	 **/
	public void EnableCurrentLimit(boolean enable) {
		MotControllerJNI.EnableCurrentLimit(m_handle, enable);
	}

}
