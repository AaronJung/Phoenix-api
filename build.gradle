import org.gradle.internal.os.OperatingSystem
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
  id 'cpp'
  id 'java'
  id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '2.1'
  id 'edu.wpi.first.NativeUtils' version '1.7.0'
  id 'edu.wpi.first.GradleVsCode' version '0.3.0'
  id 'google-test-test-suite'
  id "com.dorongold.task-tree" version "1.3"
}

apply from: "locations.gradle"
apply from: "options.gradle"

apply from: 'config.gradle'

ext.sharedFrcConfigs = [CTRE_Phoenix: ['linux:athena']]
ext.sharedCCIConfigs = [CTRE_Phoenix: []]
ext.sharedConfigsJustWind = [CTRE_Phoenix : ['windows:x86-64', 'windows:x86']] 

//For googletest (sim)
ext.staticTestConfigs = [CTRE_PhoenixTestSim: []]

//For googletest (rio)
ext.staticRoboRIOTestConfigs = [CTRE_PhoenixTestRoboRIO: []]
ext.sharedRoboRIOTestConfigs = [CTRE_PhoenixTestRoboRIO: []]
ext.staticRoboRIOTestLibraryConfigs = [CTRE_PhoenixForRoboRIOTest: []]
ext.sharedRoboRIOTestLibraryConfigs = [CTRE_PhoenixForRoboRIOTest: []] //Just exists for headers

//For googletest (socketcan)
ext.staticSocketCanTestConfigs = [CTRE_PhoenixTestSocketCan: []]

//For java unit test linking (just exists so dlls are pulled in)
ext.sharedTestConfigs = [DummyLinkForJavaTest: ['linux:x86-64', 'linux:armhf', 'linux:aarch64', 'windows:x86-64', 'windows:x86', 'osx:x86-64']]

ext.sharedConfigsFirmwareSim = [CTRE_PhoenixTestSim: []]

apply from: 'dependencies.gradle'

model {
  exportsConfigs {
      CTRE_Phoenix(ExportsConfig) {
          x86ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVbad_cast',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure']
          x64ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVbad_cast',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure']
      }
  }
  components {
    CTRE_Phoenix(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
    }

    //This project is athena with wpi. It is intended for testing only (it allows for easily building and running
    //gtest on the rio)
    CTRE_PhoenixForRoboRIOTest(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
    }
  }
  testSuites {
    //For java unit test linking (just exists so dlls are pulled in)
    DummyLinkForJavaTest(GoogleTestTestSuiteSpec) {
      for(NativeComponentSpec c : $.components) {
        if (c.name == 'CTRE_Phoenix') {
          testing c
          break
        }
      }
      sources {
        cpp {
          source {
            srcDirs 'src/dummy/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/dummy/native/include'
          }
        }
      }
    }
    //General unit test, runs on build
    CTRE_PhoenixTestSim(GoogleTestTestSuiteSpec) {
      for(NativeComponentSpec c : $.components) {
        if (c.name == 'CTRE_Phoenix') {
          testing c
          break
        }
      }
      sources {
        cpp {
          source {
            srcDirs 'src/test/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/test/native/include', 'src/main/native/include'
          }
        }
      }
    }
    //Only built if -PbuildSocketCanTest is specified (for testing with socket can platform, 
    //assumes device of each type with id 0)
    CTRE_PhoenixTestSocketCan(GoogleTestTestSuiteSpec) {
      for(NativeComponentSpec c : $.components) {
        if (c.name == 'CTRE_Phoenix') {
          testing c
          break
        }
      }
      sources {
        cpp {
          source {
            srcDirs 'src/test/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/test/native/include', 'src/main/native/include'
          }
        }
      }
    }
    //Only built if -PbuildRioTest is specified (for testing on rio, 
    //assumes device of each type with id 0)
    //To use just tranfer the file over and run it. (using scp and ssh for instance)
    CTRE_PhoenixTestRoboRIO(GoogleTestTestSuiteSpec) {
      for(NativeComponentSpec c : $.components) {
        if (c.name == 'CTRE_PhoenixForRoboRIOTest') {
          testing c
          break
        }
      }
      sources {
        cpp {
          source {
            srcDirs 'src/test/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/test/native/include', 'src/main/native/include'
          }
        }
      }
    }
  }
  binaries {
    //Only build a test suite for native execution (for now at least)
    withType(GoogleTestTestSuiteBinarySpec) {
      if (it.targetPlatform.architecture.name == 'x86' || it.targetPlatform.architecture.name == 'x86-64') {
        if(it.component.name == 'DummyLinkForJavaTest') {
          //Do all of the test setup using the lib dir
          for(lib in it.libs) {
            if(lib.linkFiles.asFileTrees.size() > 0) {
              def dir = lib.linkFiles.asFileTrees.get(0).dir
              def libPaths = []
              def prefix = OperatingSystem.current().isWindows() ? '' : 'lib'
              def extension = OperatingSystem.current().isWindows() ? 'dll' : OperatingSystem.current().isMacOsX() ? 'dylib' : 'so'

              if(dir.toString().contains('cci')) {
                project.test.systemProperty 'java.library.path', dir.toString()
              }
              def dirStr = dir.toString()
              if(dir.toString().contains('platform')) {
                
                project.tasks.create(name: 'CopyPlatformLib', type: Copy) {
                  
                  //We copy to a different place so gradle doesn't auto clean up and cause issues
                  from dir.toString() + File.separator
                  into buildDir.toString() + File.separator + "tmpPlatformSO"
                  
                  rename('(.+)_sim(.+)', '$1$2')
                }
 
                project.test.dependsOn(CopyPlatformLib)
                CopyPlatformLib.dependsOn('linkDummyLinkForJavaTestX86-64GoogleTestExe')
                
                dirStr = buildDir.toString() + File.separator + "tmpPlatformSO"                
              }
              if(OperatingSystem.current().isWindows()) {
                libPaths << test.environment.get('PATH') << dirStr
                project.test.environment.put('PATH', libPaths.join(';'))
              }
              else if(OperatingSystem.current().isMacOsX()) {
                libPaths << test.environment.get('DYLD_LIBRARY_PATH') << dirStr
                project.test.environment.put('DYLD_LIBRARY_PATH', libPaths.join(';'))
              }
              else if(OperatingSystem.current().isLinux()) {
                libPaths << test.environment.get('LD_LIBRARY_PATH') << dirStr
                project.test.environment.put('LD_LIBRARY_PATH', libPaths.join(';'))
              }
            }
          }
        } else if(it.component.name == 'CTRE_PhoenixTestSim') {
          cppCompiler.define "SIMULATION_TEST"
          for(lib in it.libs) {
            if(lib.linkFiles.asFileTrees.size() > 0 && lib.linkFiles.asFileTrees.get(0).dir.toString().contains('firmware')) {
              def libFileName = lib.linkFiles.asFileTrees.get(0).file.toString()
              if(OperatingSystem.current().isWindows()) {
                libFileName = libFileName.replaceAll('\\.lib', '.dll')
              }

              tasks.run.environment.put('CTRE_TALON_LIBRARY_PATH', libFileName)
              project.test.environment.put('CTRE_TALON_LIBRARY_PATH', libFileName)
            }
          }
        }
        else if(it.component.name == 'CTRE_PhoenixTestSocketCan') {
          it.buildable = project.hasProperty('buildSocketCanTest')
        } 
        else { //RoboRIO
          it.buildable = false
        } 
      }
      else {
        if(it.component.name == 'CTRE_PhoenixTestRoboRIO' && it.targetPlatform.architecture.name == 'athena') {
          //Build athena roborio test
          it.buildable = project.hasProperty('buildRioTest') 
          cppCompiler.define "CTR_EXCLUDE_WPILIB_CLASSES"
        }
        else {
          it.buildable = false
        }
      }
    }
    //If we are not building for windows, don't bother with the shared library
    withType(SharedLibraryBinarySpec) {
      if(it.component.name == 'CTRE_Phoenix') {
        if (it.targetPlatform.operatingSystem.name != 'windows') {
          it.buildable = false
        }
      }
      else if(it.component.name == 'CTRE_PhoenixForRoboRIOTest') {
        it.buildable = false
      }
    }
    withType(StaticLibraryBinarySpec) {
      if(it.component.name == 'CTRE_PhoenixForRoboRIOTest' && it.targetPlatform.architecture.name == 'athena' && project.hasProperty('buildRioTest')) {
        it.buildable = true
        cppCompiler.define "CTR_EXCLUDE_WPILIB_CLASSES"
      }
    }
  }
}

tasks.whenTaskAdded { task ->
    //Don't run dummy link
    if(task.name.contains('runDummyLinkForJavaTest') || task.name.contains('runCTRE_PhoenixTestSocketCan') ||
        task.name.contains('runCTRE_PhoenixTestRoboRIO')) {
        task.enabled = false
    }
    //use shuffle and random seed of 0 means use timestamp
    if(task.name.contains('runCTRE_PhoenixTestSim')) {
        task.args = task.args + ["--gtest_shuffle", "--gtest_random_seed=0"]
        
        task.enabled = !project.hasProperty('skipTesting')
    }
}

//Java testing depends on these tasks because they set up the libs etc
test.dependsOn('runDummyLinkForJavaTestX86-64GoogleTestExe')
test.dependsOn('runCTRE_PhoenixTestSimX86-64GoogleTestExe')
test.dependsOn('CopyPlatformLib')

apply from: 'publish.gradle'

publish.dependsOn check

wrapper {
  gradleVersion = '4.9'
}
