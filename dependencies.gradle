import org.gradle.internal.os.OperatingSystem

model {
    dependencyConfigs {
        niLibraries(DependencyConfig) {
            groupId = 'edu.wpi.first.ni-libraries'
            artifactId = 'ni-libraries'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '2018.4.1+'
            
            sharedConfigs = project.sharedFrcConfigs + project.sharedRoboRIOTestConfigs
            staticConfigs = [:]
        }
        //cci to link against
        phoenixCCI(DependencyConfig) {
            groupId = 'com.ctre.phoenix'
            artifactId = 'cci'
            headerClassifier = 'headers'
            ext = 'zip'
            if(ext.hasProperty("cciVersion")){
                version = ext.cciVersion
            }
            else{
                version = '+'
            }
            sharedConfigs = project.sharedCCIConfigs + project.sharedTestConfigs + project.sharedRoboRIOTestLibraryConfigs
            staticConfigs = project.staticTestConfigs + project.staticRoboRIOTestConfigs + project.staticSocketCanTestConfigs
        }
        //canutils to link against
        phoenixCanutils(DependencyConfig) {
            groupId = 'com.ctre.phoenix'
            artifactId = 'canutils'
            ext = 'zip'
            headerClassifier = 'headers'
            if(ext.hasProperty("canutilsVersion")){
                version = ext.canutilsVersion
            }
            else{
                version = '+'
            }
            sharedConfigs = project.sharedTestConfigs + project.sharedConfigsJustWind
            staticConfigs = project.staticTestConfigs + project.staticSocketCanTestConfigs
        }
        //Headers
        phoenixCore(DependencyConfig) {
            groupId = 'com.ctre.phoenix'
            artifactId = 'core'
            headerClassifier = 'headers'
            ext = 'zip'
            if(ext.hasProperty("coreVersion")){
                version = ext.coreVersion
            }
            else{
                version = '+'
            }
            sharedConfigs = project.sharedCCIConfigs + project.sharedTestConfigs
            staticConfigs = project.staticRoboRIOTestConfigs + project.staticRoboRIOTestLibraryConfigs + project.staticSocketCanTestConfigs + project.staticTestConfigs
        }
        //platform to link against
        phoenixPlatformStub(DependencyConfig) {
            groupId = 'com.ctre.phoenix'
            artifactId = 'platform-stub'
            headerClassifier = 'headers'
            ext = 'zip'
            if(ext.hasProperty("platformstubVersion")){
                version = ext.platformstubVersion
            }
            else{
                version = '+'
            }
            sharedConfigs = project.sharedConfigsJustWind
            staticConfigs = [:]
        }
        //Platform for sim unit tests
        phoenixPlatformSim(DependencyConfig) {
            groupId = 'com.ctre.phoenix'
            artifactId = 'platform-sim'
            headerClassifier = 'headers'
            ext = 'zip'
            if(ext.hasProperty("platformsimVersion")){
                version = ext.platformsimVersion
            }
            else{
                version = '+'
            }
            sharedConfigs = project.sharedTestConfigs
            staticConfigs = project.staticTestConfigs
        }
        //Platform for socket can unit tests
        phoenixPlatformSocketCan(DependencyConfig) {
            groupId = 'com.ctre.phoenix'
            artifactId = 'platform-socketcan'
            headerClassifier = 'headers'
            ext = 'zip'
            if(ext.hasProperty("platformsocketcanVersion")){
                version = ext.platformsocketcanVersion
            }
            else{
                version = '+'
            }
            sharedConfigs = [:]
            staticConfigs = project.staticSocketCanTestConfigs
        }
        //Firmware sim for sim unit tests 
        phoenixFirmwareSim(DependencyConfig) {
            groupId = 'com.ctre.phoenix'
            artifactId = 'firmware-sim'
            headerClassifier = 'headers'
            ext = 'zip'
            if(ext.hasProperty("firmwaresimVersion")){
                version = ext.firmwaresimVersion
            }
            else{
                version = '+'
            }
            sharedConfigs = project.sharedConfigsFirmwareSim
            staticConfigs = [:]
        }
        //hal is needed for frc
        hal(DependencyConfig) {
            groupId = 'edu.wpi.first.hal'
            artifactId = 'hal'
            headerClassifier = 'headers'
            sourceClassifier = 'sources'
            ext = 'zip'
            version = '2018.4.1+'
            sharedConfigs = project.sharedFrcConfigs + project.sharedRoboRIOTestConfigs
            staticConfigs = [:]
        }
        //wpiutil for frc
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            sourceClassifier = 'sources'
            ext = 'zip'
            version = '3.2+'
            sharedConfigs = project.sharedFrcConfigs + project.sharedRoboRIOTestConfigs
            staticConfigs = [:]
        }
        //ntcore for frc
        ntcore(DependencyConfig) {
            groupId = 'edu.wpi.first.ntcore'
            artifactId = 'ntcore-cpp'
            headerClassifier = 'headers'
            sourceClassifier = 'sources'
            ext = 'zip'
            version = '4.1.0+'
            sharedConfigs = project.sharedFrcConfigs + project.sharedRoboRIOTestConfigs
            staticConfigs = [:]
        }
        //wpilibc for frc
        wpilibc(DependencyConfig) {
            groupId = 'edu.wpi.first.wpilibc'
            artifactId = 'wpilibc'
            headerClassifier = 'headers'
            sourceClassifier = 'sources'
            ext = 'zip'
            version = '2018.4.1+'
            sharedConfigs = project.sharedFrcConfigs
            staticConfigs = [:]
        }
        //googletest for unit tests
        googletest(DependencyConfig) {
            groupId = 'edu.wpi.first.thirdparty.frc2018'
            artifactId = 'googletest'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '1.8.0-1-4e4df22'
            sharedConfigs = [:]
            staticConfigs = project.staticTestConfigs + project.staticRoboRIOTestConfigs + project.staticSocketCanTestConfigs
        }
    }
    
}

//Needed for JUnit
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    if(!project.hasProperty('skipAthena')) {
      compile 'edu.wpi.first.ntcore:ntcore-java:4.1.0+'
      compile 'edu.wpi.first.wpilibj:wpilibj-java:2018.4.1+'
    }
  //Add JUnit
  testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0')
  testCompile('org.junit.jupiter:junit-jupiter-params:5.2.0')
  testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
}

//Set up JUnit
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
