#include "ctre/phoenix/MotorControl/CAN/VictorSPX.h"
#include "HAL/HAL.h"

using namespace ctre::phoenix;
using namespace ctre::phoenix::motorcontrol::can;
/**
 * Constructor
 * @param deviceNumber [0,62]
 */
VictorSPX::VictorSPX(int deviceNumber) :
    BaseMotorController(deviceNumber | 0x01040000) {
		HAL_Report(HALUsageReporting::kResourceType_CTRE_future1, deviceNumber + 1);
	}


/**
 * Gets all PID set persistant settings.
 *
 * @param pid               Object with all of the PID set persistant settings
 * @param pidIdx            0 for Primary closed-loop. 1 for auxiliary closed-loop.
 * @param timeoutMs
 *              Timeout value in ms. If nonzero, function will wait for
 *              config success and report an error if it times out.
 *              If zero, no blocking or checking is performed.
 */
ctre::phoenix::ErrorCode VictorSPX::ConfigurePID(const VictorSPXPIDSetConfiguration &pid, int pidIdx, int timeoutMs) {
    ErrorCollection errorCollection;
    
    //------ sensor selection ----------//      

	errorCollection.NewError(BaseConfigurePID(pid, pidIdx, timeoutMs));
    errorCollection.NewError(ConfigSelectedFeedbackSensor(pid.selectedFeedbackSensor, pidIdx, timeoutMs));
        

	return errorCollection._worstError;
}
/**
 * Gets all PID set persistant settings (overloaded so timeoutMs is 50 ms
 * and pidIdx is 0).
 *
 * @param pid               Object with all of the PID set persistant settings
 */
void VictorSPX::GetPIDConfigs(VictorSPXPIDSetConfiguration &pid, int pidIdx, int timeoutMs)
{
	BaseGetPIDConfigs(pid, pidIdx, timeoutMs);
	pid.selectedFeedbackSensor = (RemoteFeedbackDevice) ConfigGetParameter(eFeedbackSensorType, pidIdx, timeoutMs);

}

/**
 * Configures all peristant settings.
 *
 * @param allConfigs        Object with all of the persistant settings
 * @param timeoutMs
 *              Timeout value in ms. If nonzero, function will wait for
 *              config success and report an error if it times out.
 *              If zero, no blocking or checking is performed.
 *
 * @return Error Code generated by function. 0 indicates no error. 
 */
ErrorCode VictorSPX::ConfigAllSettings(const VictorSPXConfiguration &allConfigs, int timeoutMs) {
    ErrorCollection errorCollection;
	
	errorCollection.NewError(BaseConfigAllSettings(allConfigs, timeoutMs));	
	
	//------ remote limit switch ----------//
	if(allConfigs.forwardLimitSwitchSource != _defaultVictorConfigurations.forwardLimitSwitchSource || allConfigs.forwardLimitSwitchNormal != _defaultVictorConfigurations.forwardLimitSwitchNormal ||
	   allConfigs.forwardLimitSwitchDeviceID != _defaultVictorConfigurations.forwardLimitSwitchDeviceID || !allConfigs.enableOptimizations)	
			errorCollection.NewError(ConfigForwardLimitSwitchSource(allConfigs.forwardLimitSwitchSource, allConfigs.forwardLimitSwitchNormal, 
			allConfigs.forwardLimitSwitchDeviceID, timeoutMs));
    
	if(allConfigs.reverseLimitSwitchSource != _defaultVictorConfigurations.reverseLimitSwitchSource || allConfigs.reverseLimitSwitchNormal != _defaultVictorConfigurations.reverseLimitSwitchNormal ||
	   allConfigs.reverseLimitSwitchDeviceID != _defaultVictorConfigurations.reverseLimitSwitchDeviceID || !allConfigs.enableOptimizations)
			errorCollection.NewError(ConfigReverseLimitSwitchSource(allConfigs.reverseLimitSwitchSource, allConfigs.reverseLimitSwitchNormal, 
			allConfigs.reverseLimitSwitchDeviceID, timeoutMs));
        
		
	//--------PIDs---------------//
	
    if(allConfigs.primaryPID != _defaultVictorConfigurations.primaryPID || !allConfigs.enableOptimizations) errorCollection.NewError(ConfigurePID(allConfigs.primaryPID, 0, timeoutMs));
        
    if(allConfigs.auxilaryPID != _defaultVictorConfigurations.auxilaryPID || !allConfigs.enableOptimizations) errorCollection.NewError(ConfigurePID(allConfigs.auxilaryPID, 1, timeoutMs));
        
    if(allConfigs.sum0Term != _defaultVictorConfigurations.sum0Term || !allConfigs.enableOptimizations) errorCollection.NewError(ConfigSensorTerm(SensorTerm::SensorTerm_Sum0, allConfigs.sum0Term, timeoutMs));
        
    if(allConfigs.sum1Term != _defaultVictorConfigurations.sum1Term || !allConfigs.enableOptimizations) errorCollection.NewError(ConfigSensorTerm(SensorTerm::SensorTerm_Sum1, allConfigs.sum1Term, timeoutMs));
        
    if(allConfigs.diff0Term != _defaultVictorConfigurations.diff0Term || !allConfigs.enableOptimizations) errorCollection.NewError(ConfigSensorTerm(SensorTerm::SensorTerm_Diff0, allConfigs.diff0Term, timeoutMs));
        
    if(allConfigs.diff1Term != _defaultVictorConfigurations.diff1Term || !allConfigs.enableOptimizations) errorCollection.NewError(ConfigSensorTerm(SensorTerm::SensorTerm_Diff1, allConfigs.diff1Term, timeoutMs));
        
	
    return errorCollection._worstError;
}
/**
 * Gets all persistant settings.
 *
 * @param allConfigs        Object with all of the persistant settings
 * @param timeoutMs
 *              Timeout value in ms. If nonzero, function will wait for
 *              config success and report an error if it times out.
 *              If zero, no blocking or checking is performed.
 */
void VictorSPX::GetAllConfigs(VictorSPXConfiguration &allConfigs, int timeoutMs) {
	
	BaseGetAllConfigs(allConfigs, timeoutMs);
	
	GetPIDConfigs(allConfigs.primaryPID, 0, timeoutMs);
	GetPIDConfigs(allConfigs.auxilaryPID, 1, timeoutMs);
    allConfigs.sum0Term = (RemoteFeedbackDevice) ConfigGetParameter(eSensorTerm, 0, timeoutMs);
    allConfigs.sum1Term = (RemoteFeedbackDevice) ConfigGetParameter(eSensorTerm, 1, timeoutMs);
    allConfigs.diff0Term = (RemoteFeedbackDevice) ConfigGetParameter(eSensorTerm, 2, timeoutMs);
    allConfigs.diff1Term = (RemoteFeedbackDevice) ConfigGetParameter(eSensorTerm, 3, timeoutMs);

	allConfigs.forwardLimitSwitchSource = (RemoteLimitSwitchSource) ConfigGetParameter(eLimitSwitchSource, 0, timeoutMs);
	allConfigs.reverseLimitSwitchSource = (RemoteLimitSwitchSource) ConfigGetParameter(eLimitSwitchSource, 1, timeoutMs);
	allConfigs.forwardLimitSwitchDeviceID = (int) ConfigGetParameter(eLimitSwitchRemoteDevID, 0, timeoutMs);
	allConfigs.reverseLimitSwitchDeviceID = (int) ConfigGetParameter(eLimitSwitchRemoteDevID, 1, timeoutMs);
	allConfigs.forwardLimitSwitchNormal = (LimitSwitchNormal) ConfigGetParameter(eLimitSwitchNormClosedAndDis, 0, timeoutMs);
	allConfigs.reverseLimitSwitchNormal = (LimitSwitchNormal) ConfigGetParameter(eLimitSwitchNormClosedAndDis, 1, timeoutMs);

}

